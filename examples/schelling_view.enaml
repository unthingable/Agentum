from itertools import product
from threading import Thread

from atom.api import Atom, Bool, Unicode, Event
from enaml.layout.api import vbox, hbox, spacer, align
from enaml.core.api import Looper
from enaml.stdlib.fields import IntField
from enaml.widgets.api import Window, Container, Label, MPLCanvas, CheckBox, ComboBox, PushButton as Button, PushButton, Slider, Form, GroupBox
from enaml.application import Application

from matplotlib.figure import Figure


enamldef SchellingView(Window):
    attr worker
    attr APP = Application.instance()
    Container: main:
        constraints = [
            vbox(
                hbox(reset, step, step100, steplabel, spacer),
                hbox(vbox(dim, controls), canvas),
            ),
            # cbox.v_center == check.v_center,
        ]
        Button: reset:
            text = 'Reset'
            clicked :: worker.sim_init(force=True); canvas.proxy._refresh_mpl_widget()
        Button: step:
            text = 'Step'
            clicked ::
                worker.step();
                worker.sim.update_fig();
                canvas.proxy._refresh_mpl_widget()
        Button: step100:
            text = 'Step 100'
            clicked ::
                worker.run(100);
                worker.sim.update_fig();
                canvas.proxy._refresh_mpl_widget()
        Label: steplabel:
            text << str(worker.stepnum)
        Container: dim:
            constraints = [hbox(dimx, label, dimy)]
            IntField: dimx:
                value := worker.sim.dimensions[0]
            Label: label:
                text = 'x'
            IntField: dimy:
                value := worker.sim.dimensions[1]

        Form: controls:
            Looper: looper:
                iterable = product(['blue', 'red'], ['fill', 'tolerance'])
                Label:
                    text << "%s %s: %d%%" % (slider.color, slider.param, slider.value)
                Slider: slider:
                    attr color = loop_item[0]
                    attr param = loop_item[1]
                    tick_interval = 1
                    maximum = 100
                    minimum = 1
                    value << int(worker.sim.agent_params[color][slider.param] * 100)
                    value ::
                        worker.sim.agent_params[slider.color][slider.param] = slider.value / 100.0
        MPLCanvas: canvas:
            figure << worker.sim.fig
            # bus.event :: print 'hi'

